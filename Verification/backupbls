#include <pbc.h>
#include <pbc_test.h>
#include <stdbool.h>
#include <stdio.h>
#include <time.h>


int NUMSCALE = 1000000;
int RANDOMRANGE = 2000;

bool ErrorFlag = false;

//Generator of G1 and G2
element_t g,h,l,l1;

/* Initialize the group generators */
void init_group_generators(pairing_t pairing);

/*Compress the proof to save communication cost */
unsigned char * compressG1( pairing_t pairing, element_t g1);
unsigned char * compressG2( pairing_t pairing, element_t g2);
int getsizeofGT( pairing_t pairing);

/*Proof of uni generated from client or server, i.e. g^a. */
void generate_Aproof(element_t a_enc, pairing_t pairing, long int a);    

/* Proof of unit create from the server or client side, i.e. g^w */
void create_Wproof(element_t w_enc, pairing_t pairing, long int w);

/* Proof of unit create from the client sidei, i.e. e(g^a,h^w) */
void generate_Uproof(element_t unit_enc, element_t ga, element_t hw, pairing_t pairing);

/*Proof of weighted sum from the client, i.e. l^r which is used to commitment */
void create_Rproof(mpz_t r, element_t gt, pairing_t pairing);

/* Proof of Pederson Commitment */
void generate_Cproof(element_t commit, element_t r_enc, element_t unit_enc, pairing_t pairing);

/* verify the unit value, i.e. e(g^a,h^w) ?= e(g,h)^(unit) */
bool verify_unit(pairing_t pairing, element_t ga, element_t hw, element_t unit_enc);

/* verify the weighted sum, i.e. z = a1w1 + a2w2; */
bool verify_wsum(pairing_t pairing, long int wsum, mpz_t R, element_t PCOM);

void readInputdata( long int *input, char * filename);
void readWeightParmaters( long int * weight, char * filename);

void UnitVOConstructionTime(pairing_t paring, long int pix, long int w,
				element_t ga, element_t hw, element_t unit_enc);

bool checkSignOfUnit( long int pix, long int weight );

void aggregateProof(bool flag, int k, element_t PCOM, element_t PCOM2, mpz_t R, mpz_t R2,
	element_t pcom, mpz_t r );

void writeTolog( char * buff);

float exponential(int n, float x); 
/***** end of function definition *****/


int main(int argc, char **argv) {


  time_t t = time(NULL);  struct tm *tm = localtime(&t); char s[64]; strftime(s, sizeof(s), "%c\n", tm);
  writeTolog(s); writeTolog("wsum_vtime\t werr_vtime\t unit_vtime\t unit_ctime\t wsum_ctime\t comm_ctime\n");

  //read the input data into memory : 2000 test data example with 784 dimensions 
  int size = 2000, dim = 784;
  long int *input = (long int *)malloc(size * dim * sizeof(long int)); 
  readInputdata(input,"/home/bzhang41/DLVerification/dataset/testdata.txt");
  
  //read the weight parameter 784 * 512
  int n1 = 512;
  long int *fc1_weight = (long int * ) malloc(dim * n1 * sizeof (long int));
  readWeightParmaters(fc1_weight, "/home/bzhang41/DLVerification/dataset/fc1_weight.txt");
  
  /***Initial the pairing function***/
  pairing_t pairing;
  pbc_demo_pairing_init(pairing, argc, argv);
  init_group_generators(pairing);

  //log buff
  char * buff = ( char *) malloc( 1000 * sizeof(char));
  
  //First Layer Verification
  double unitvo_cons_time = 0;
  double commvo_cons_time = 0;
  double weisum_cons_time = 0;
  double wsum_verify_time = 0;
  double unit_verify_time = 0;
  double werr_verify_time = 0;

  //chage inputnum and neruon_num to simulate different layer's verification
  int inputnum = 10, neuron_num = 1;
  clock_t start, end;
  for ( int i = 0; i < 1 ; ++ i){
      for (int j = 0 ; j < neuron_num ; ++ j ){ //j < neuron_num
         
          mpz_t R; mpz_init(R);
          mpz_t R2; mpz_init(R2);
	  element_t PCOM; element_init_GT(PCOM, pairing);
	  element_t PCOM2; element_init_GT(PCOM2, pairing);
	  long int wsumP = 0; //for the unit value that is Positive
	  long int wsumN = 0; //for the unit value that is Negative
	  long int wsum = 0;
 
	  for ( int k = 0 ; k < inputnum ; ++ k){ // k < inputnum

              
	      long int w = (fc1_weight[k*dim+j]);
	      long int pix = (input[i*dim+k]);
	      wsum += (w*pix);

	      bool flag =  checkSignOfUnit(pix,w);
	      w = abs(w); pix = abs(pix);

              /**************** Client VO Generation ******************/
	      element_t ga, hw, unit_enc, pcom;
	      mpz_t r; element_t r_enc;

	      start = clock();
	      //h^r
              create_Rproof(r, r_enc,pairing);
	      //g^a
	      end = clock();
	      unitvo_cons_time += (((double) (end - start)) / CLOCKS_PER_SEC);


	      start = clock();
  	      generate_Aproof(ga,pairing,pix);
	      
	      unsigned char * sizetest = compressG1(pairing,ga); free(sizetest); 
  	      //create h^w
  	      create_Wproof(hw,pairing,w);
	      end = clock();
	      commvo_cons_time += (((double) (end - start)) / CLOCKS_PER_SEC);

	      start = clock();
  	      //generate l^unit =  e(g^a,h^w)
  	      generate_Uproof(unit_enc,ga,hw,pairing);
	      end = clock();
	      unitvo_cons_time += (((double) (end - start)) / CLOCKS_PER_SEC);
	      
	      element_printf("size of gt = %B\n", unit_enc); 


	      start = clock();
    	      generate_Cproof(pcom,r_enc,unit_enc,pairing);
	      end = clock();
	      weisum_cons_time += (((double) (end - start)) / CLOCKS_PER_SEC);

	      if ( flag ) wsumP += (w*pix);
	      else wsumN += (w*pix);
	      printf("size of wsum = %ld\n",w*pix);


	      start = clock();
	      /****************** Server verifies the Unit  ***********/
              verify_unit(pairing,ga,hw,unit_enc);
	      /******************************************************/
	      end = clock();
              unit_verify_time += (((double) (end - start)) / CLOCKS_PER_SEC);


	      start = clock();
              //Server aggregates the ramdom value and commitment  
	      aggregateProof(flag, k, PCOM, PCOM2, R, R2, pcom, r );
	      end = clock();
              wsum_verify_time += (((double) (end - start)) / CLOCKS_PER_SEC); 

	
	      //release memory
              element_clear(ga); element_clear(hw); element_clear(unit_enc);
	      element_clear(r_enc); mpz_clear(r); element_clear(pcom);
	  }

	  /****** Server Veify Weighted SUM : R = r1 + r2... + rn and C=C1 * C2 * ...Cn*/
	  float y = -(((double) (wsumP-wsumN)) / ((double) NUMSCALE) );
 	  double exp_value = exponential(20,y); double return_value = 1 / (1+exp_value);

  	  float z1 = -(((double) (wsumP-wsumN)) / ((double) NUMSCALE) );
          double exp_value4 = exponential(20,z1);
          float  return_value4 = 1 / (1 + exp_value4);
          double  derivative2 = return_value4 * (1-return_value4);


	  start = clock();
	  if ( wsumP > 0 ) verify_wsum(pairing, wsumP, R, PCOM);
          else {mpz_clear(R); element_clear(PCOM);}
 	  
	  if ( wsumN > 0 ) verify_wsum(pairing, wsumN, R2, PCOM2);
	  else { mpz_clear(R2); element_clear(PCOM2);}

	  //Verify the two parts of sum 
	  if ( wsumP-wsumN != wsum ) ErrorFlag = true; 
	  end = clock();

	  wsum_verify_time += (((double) (end - start)) / CLOCKS_PER_SEC);
	  werr_verify_time += (((double) (end - start)) / CLOCKS_PER_SEC);

	  start = clock();
	  //Verify the sigmoid function (Simulate local computation)
	  float x = -(((double) wsum) / ((double) NUMSCALE) );
          double exp_value2 = exponential(20,x);
          float  return_value2 = 1 / (1 + exp_value2);
	  if ( abs(return_value2-return_value) > 0.00001) ErrorFlag = true;
	  end = clock();

          wsum_verify_time += (((double) (end - start)) / CLOCKS_PER_SEC);

	  start = clock();
	  float z = -(((double) wsum) / ((double) NUMSCALE) );
          double exp_value3 = exponential(20,z);
          float  return_value3 = 1 / (1 + exp_value3);
	  double  derivative = return_value3 * (1-return_value3);
	  if ( abs(derivative-derivative2) > 0.00001 ) ErrorFlag = true;
	  end = clock();
	  werr_verify_time += (((double) (end - start)) / CLOCKS_PER_SEC);

 	  snprintf(buff, 1000, "%f\t ", wsum_verify_time); writeTolog(buff);
 	  snprintf(buff, 1000, "%f\t ", werr_verify_time); writeTolog(buff);
 	  snprintf(buff, 1000, "%f\t ", unit_verify_time); writeTolog(buff);
 	  snprintf(buff, 1000, "%f\t ", unitvo_cons_time); writeTolog(buff);
 	  snprintf(buff, 1000, "%f\t ", weisum_cons_time); writeTolog(buff);
 	  snprintf(buff, 1000, "%f\n",  commvo_cons_time); writeTolog(buff);
          
	  if (ErrorFlag){
		printf("Error happend please Debug!\n");
	  }          

          if ( j % 100 == 0 ){
		printf("#of Unit Finished:%d\n", (j+1)*dim);
	  }

      }
  } 
  
  
  printf("%d\n",ErrorFlag);
  free(buff);
  return 0;
}







/****** Start of function details *****/
void init_group_generators(pairing_t pairing){

   element_init_G2(g, pairing);
   element_init_GT(l, pairing);
   element_init_GT(l1, pairing);
   element_init_G1(h, pairing);

   element_random(g);
   //element_printf("system parameter g = %B\n", g);

   element_random(l);
   //element_printf("system parameter l = %B\n", l);

   element_random(h);
   //element_printf("system parameter h = %B\n", h);
  
   element_pairing(l1,g,h);
}

unsigned char * compressG1( pairing_t pairing, element_t g1){

    int n = pairing_length_in_bytes_compressed_G1(pairing);
    printf("The length of proof len = %d\n",n);
    unsigned char *data = pbc_malloc(n);

    element_to_bytes_compressed(data, g1);
    return data;
}

unsigned char * compressG2( pairing_t pairing, element_t g2){

    int n = pairing_length_in_bytes_compressed_G2(pairing);
    printf("The length of proof len = %d\n",n);
    unsigned char *data = pbc_malloc(n);

    element_to_bytes_compressed(data, g2);
    return data;
}

int getsizeofGT( pairing_t pairing){

    int n = pairing_length_in_bytes_GT(pairing);
    return n;
}

void generate_Aproof(element_t a_enc, pairing_t pairing, long int a){

    mpz_t ampz;
    mpz_init(ampz);
    element_init_G2(a_enc,pairing);

    mpz_set_si (ampz, a);
    element_pow_mpz(a_enc,g,ampz);
    //element_printf("proof g^a = %B\n", a_enc);
    mpz_clear(ampz);
}

void create_Wproof(element_t w_enc, pairing_t pairing, long int w){

    mpz_t wmpz;

    mpz_init(wmpz);
    mpz_set_si (wmpz, w);
    element_init_G1(w_enc,pairing);
    element_pow_mpz(w_enc,h,wmpz);
    //element_printf("proof h^w = %B\n", w_enc);
    mpz_clear(wmpz);

}

void generate_Uproof(element_t unit_enc, element_t ga, element_t hw, pairing_t pairing){

    element_init_GT(unit_enc, pairing);
    element_pairing(unit_enc,ga,hw);

}

void create_Rproof(mpz_t r, element_t gt, pairing_t pairing){

    gmp_randstate_t state;
    gmp_randinit_default(state);
    mpz_init(r);
    mpz_urandomb (r,state, RANDOMRANGE);
 
    FILE * file;
    file = fopen("sizetest", "a");
    int size = mpz_out_raw(file, r);
    
    printf ("r = %d\n", size);

    //clock_t start, end;
    element_init_GT(gt, pairing);
    //start = clock();
    element_pow_mpz(gt,l,r);
    //end = clock();
    //double test = ((double) (end - start)) / CLOCKS_PER_SEC;
    //printf("time=%f",test); 
}

void generate_Cproof(element_t commit, element_t r_enc, element_t unit_enc, pairing_t pairing){


    element_init_GT(commit, pairing);
    element_mul(commit,r_enc ,unit_enc);

}

bool verify_unit(pairing_t pairing, element_t ga, element_t hw, element_t unit_enc){

     element_t tmp1;
     element_init_GT(tmp1, pairing);

     //e(g^a,h^w)
     element_pairing(tmp1, ga, hw);

     //e(g^a,h^w) ?= e(g,h)^(aw)
     bool flag = true;
     if (!element_cmp(tmp1, unit_enc)) {
        //printf("unit verifies\n");
     } else {
        //printf("*BUG* signature does not verify *BUG*\n");
        ErrorFlag = true;
        flag =  false;
     }

     element_clear(tmp1);
     return flag;
}

void readInputdata( long int  *input, char * filename){

  char * pixstr = malloc( 20 * sizeof(char));
  int i = 0;
  char tmp;

  FILE *file;
  file = fopen(filename, "r");
  int count  = 0 ;
 
  if ( file != NULL ){

       while ( (tmp = (char)fgetc(file)) != EOF ){ 

	   if (tmp == '[' || tmp == '\t' || tmp == '\n') continue;

	   pixstr[i++] = tmp;
           if ( tmp == ' ' || tmp == ']'){
		pixstr[i-1] = '\0';
   		if ( pixstr[0] != '\0' ) {
			input[count++] = (long int) (NUMSCALE * atof(pixstr));
			//printf("%d\n", input[count-1]);
		}
		i = 0;
	   }
       }

       fclose(file);
  }
  else printf("file open error\n");
 
  //printf("n=%d\n", count);
  free(pixstr);
}

void readWeightParmaters( long int * weight, char * filename){

  char * pixstr = malloc( 20 * sizeof(char));
  int i = 0;
  char tmp;

  FILE *file;
  file = fopen(filename, "r");
  int count  = 0 ;

  if ( file != NULL ){

       while ( (tmp = (char)fgetc(file)) != EOF ){

           if (tmp == '[' || tmp == '\t' || tmp == '\n') continue;

           pixstr[i++] = tmp;
           if ( tmp == ' ' || tmp == ']'){
                pixstr[i-1] = '\0';
                if ( pixstr[0] != '\0' ) {
			if ( pixstr[i-2] == '.' ) pixstr[i-2] = '\0';
                        weight[count++] = (long int) (atof(pixstr));
                        //printf("%ld\n", weight[count-1]);
                }
                i = 0;
           }
       }
       fclose(file);
  }
  else printf("file open error\n");

  //printf("n=%d\n", count);
  free(pixstr);
}


void UnitVOConstructionTime(pairing_t pairing, long int pix, long int w, 
		element_t ga, element_t hw, element_t unit_enc){

  //generate g^a
  generate_Aproof(ga,pairing,pix);

  //create h^w
  create_Wproof(hw,pairing,w);

  //generate l^unit =  e(g^a,h^w)
  generate_Uproof(unit_enc,ga,hw,pairing);

}

bool checkSignOfUnit( long int pix, long int weight ){

  if ( pix * weight <= 0 ) return false;
  return true;
}

bool verify_wsum(pairing_t pairing, long int wsum, mpz_t R, element_t PCOM){

  //l^S
  mpz_t smpz; mpz_init(smpz); mpz_set_si (smpz, wsum);
  element_t S_enc; element_init_GT(S_enc,pairing);
  element_pow_mpz(S_enc,l1,smpz);
	
  //l^R
  element_t R_enc; element_init_GT(R_enc, pairing);
  element_pow_mpz(R_enc,l,R);

  //(l^R) * (l^S)
  element_t tmp; element_init_GT(tmp, pairing);
  element_mul(tmp, S_enc,R_enc); 
	  
  if (!element_cmp(tmp, PCOM)) {
        //printf("weighted sum verifies\n");
	return true;
  }
  else {
        //printf("*BUG* signature does not verify *BUG*\n");
	ErrorFlag = true;
	return false;
  }

  element_clear(S_enc); element_clear(R_enc); mpz_clear(R); element_clear(PCOM);
  element_clear(tmp); mpz_clear(smpz);

}

void aggregateProof(bool flag, int k, element_t PCOM, element_t PCOM2, mpz_t R, mpz_t R2,
        element_t pcom, mpz_t r ){

    if ( k == 0 && flag ) {
        element_set(PCOM,pcom);  mpz_set(R,r);
    }
    else if (k > 0 && flag) {
        element_mul(PCOM,PCOM,pcom);  mpz_add(R,R,r);
    }
    else if ( k == 0 && (!flag) ){
        element_set(PCOM2,pcom);  mpz_set(R2,r);
    }
    else{
        element_mul(PCOM2,PCOM2,pcom); mpz_add(R2,R2,r);
    }
}

void writeTolog( char * buff){

    FILE *pfile;
    pfile = fopen("log", "a");

    if ( pfile != NULL ){
        fprintf(pfile, "%s", buff);
        fclose(pfile);
    }
    else printf("log file cannot open\n");

}

float exponential(int n, float x) { 
    float sum = 1.0f; // initialize sum of series 
  
    for (int i = n - 1; i > 0; --i ) 
        sum = 1 + x * sum / i; 
  
    return sum; 
} 
