#include <pbc.h>
#include <pbc_test.h>
#include <stdbool.h>
#include <stdio.h>
#include <time.h>
#include <math.h>
//The prime number 730750818665451621361119245571504901405976559617

int NUMSCALE = 1000000;
int RANDOMRANGE = 2000;

bool ErrorFlag = false;
long int E1 = 123456; //Test E1
long int DELTA = 123456; //Test output error signal

//Generator of G1 and G2
element_t g,h,l,l1;

/* Initialize the group generators */
void init_group_generators(pairing_t pairing);

/*Compress the proof to save communication cost */
unsigned char * compressG1( pairing_t pairing, element_t g1);
unsigned char * compressG2( pairing_t pairing, element_t g2);
int getsizeofGT( pairing_t pairing);

/*Proof of uni generated from client or server, i.e. g^a. */
void generate_Aproof(element_t a_enc, pairing_t pairing, long int a);    

//Generate g^a, even if a is negative value
void generate_AproofWithNegativeValue(element_t a_enc, pairing_t pairing, long int a);

/* Proof of unit create from the server or client side, i.e. g^w */
void create_Wproof(element_t w_enc, pairing_t pairing, long int w);

// g^w deal with negative value
void create_WproofWithNegativeValue(element_t w_enc, pairing_t pairing, long int w);

/* Proof of unit create from the client sidei, i.e. e(g^a,h^w) */
void generate_Uproof(element_t unit_enc, element_t ga, element_t hw, pairing_t pairing);

/*Proof of weighted sum from the client, i.e. l^r which is used to commitment */
void create_Rproof(mpz_t r, element_t gt, pairing_t pairing);

/* Proof of Pederson Commitment */
void generate_Cproof(element_t commit, element_t r_enc, element_t unit_enc, pairing_t pairing);

//the weighted sum proof e(g,h)^z or e(g,h)^(z+q)
void create_ZproofWithNegativeValue(element_t z_enc, pairing_t pairing, long int z);

/* verify the unit value, i.e. e(g^a,h^w) ?= e(g,h)^(unit) */
bool verify_unit(pairing_t pairing, element_t ga, element_t hw, element_t unit_enc);

/* verify the weighted sum, i.e. z = a1w1 + a2w2; */
bool verify_wsum(pairing_t pairing, long int wsum, mpz_t R, element_t PCOM);

void readWeightParmaters( long int * weight, char * filename);

void UnitVOConstructionTime(pairing_t paring, long int pix, long int w,
				element_t ga, element_t hw, element_t unit_enc);

bool checkSignOfUnit( long int pix, long int weight );

void aggregateProof(bool flag, int k, element_t PCOM, element_t PCOM2, mpz_t R, mpz_t R2,
	element_t pcom, mpz_t r );

void aggregatePairingResult(int k, element_t PCOM, element_t pcom);

void writeTolog( char * buff);

float exponential(int n, float x); 
 
void readInputdata( long int  *input, int * inputIndex, char * filename);
/***** end of function definition *****/


int main(int argc, char **argv) {

  clock_t start, end;
    
  /***Initial the pairing function***/
  pairing_t pairing;
  pbc_demo_pairing_init(pairing, argc, argv);
  init_group_generators(pairing);

  time_t t = time(NULL);  struct tm * tm = localtime(&t); char s[64]; strftime(s, sizeof(s), "%c\n", tm);
  writeTolog(s); 
  //writeTolog("step1.1\t step1.2\t step1.3\t step2.1\t step2.2\t step2.3\t step2.4\t step2.5\t step2.6\n");

  //read the input data into memory : 2000 test data example with 784 dimensions 
  int size = 6698834;
  long int *input = (long int *)malloc( size * sizeof(long int));
  int *inputIndex = (int *)malloc(1680 *  sizeof(int));
  readInputdata(input, inputIndex, "/home/bzhang41/deeplearninglib/timit-preprocessor/data/processed/test.13.ark");


  //4000*50 = 200000
  //read the weight parameter 784 * 512 == 401408 //
  //network 784*20 + 230*230 + 20*230 + 230*20 + 20*10 = 77980
  int n1 = 512, dim = 784;
  long int *fc1_weight = (long int * ) malloc(dim * n1 * sizeof (long int));
  readWeightParmaters(fc1_weight, "/home/bzhang41/DLVerification/dataset/fc1_weight.txt");


  //401408  
  start = clock(); 
  int weightNumber = 4000 * 100;
  element_t *encWeight = ( element_t *) malloc ( weightNumber  * sizeof(element_t));
  for ( int i = 0 ; i < weightNumber ; ++ i ){
        create_WproofWithNegativeValue(encWeight[i],pairing,fc1_weight[i]);
  }
  end = clock();
  double prooftest = (((double) (end - start)) / CLOCKS_PER_SEC);
  printf("%f\n",prooftest);
  

  double step1_1 = 0; //Verifcation of weighted sum at the first layer
  double step1_2 = 0; //Calculation of the output
  double step1_3 = 0; //Verification of E1
  double step2_1 = 0; //verification of output error signal
  double step2_2 = 0; //verification of partial derivative at output layer
  double step2_3 = 0; //verification of error signal at last hidden layer
  double step2_4 = 0; //calculate the derivative at hidden layer
  double step2_5 = 0; //verification of derivation at input layer
  double step2_6 = 0; //calculation of weight update

  //prepare encrpted value to save running time (Those are the VO from the client)
  int pixNumber = 4000*101;
  element_t *encInput = ( element_t *)malloc (pixNumber * sizeof(element_t));
  //printf("vo construction time for all\n");
  for ( int i = 0 ; i < pixNumber ; ++ i ){
	generate_AproofWithNegativeValue(encInput[i],pairing,input[i]);
	//element_printf("proof g^a = %B\n", encInput[i]);
  }  

  printf("finish generating the proof\n");
  //log buff
  char * buff = ( char *) malloc( 1000 * sizeof(char));
  
  int countWeight = 0 ;
  int neuronNumberAtH1 = 10, neuronNumberAtH2 = 240, neuronNumberAtH3 = 240, neuronNumberAtH4 = 10, outputNum = 61;

  dim = 4000;
  int batchsize = 100;
  for ( int i = 0; i < batchsize ; ++ i){

      countWeight = 0;
      
      //First hidden layer, verify weighted sum 784*neuronNumberAtH1
      start = clock();
      long int * zk = ( long int *) malloc( neuronNumberAtH1 * sizeof(long int)); 
      for (int j = 0 ; j < neuronNumberAtH1 ; ++ j ){
         
          //aggregated pairing viarable
          element_t PCOM, ghz; element_init_GT(PCOM, pairing);
          long int wsum = 0 ;
 
          for ( int k = 0 ; k < dim ; ++ k){ // k < inputnum : the dimension of the input data

              long int w = (fc1_weight[countWeight++]);
              long int pix = (input[i*dim+k]);
              wsum += (w*pix);

              element_t pcom ; //, wcom;
              //generate g^w
              //create_WproofWithNegativeValue(wcom,pairing,w);
              //generate l^unit =  e(g^a,g^w)
              generate_Uproof(pcom,encInput[i*dim+k],encWeight[countWeight-1],pairing);
              //element_printf("size of gt = %B\n", unit_enc);

              aggregatePairingResult(k,PCOM,pcom);
              //printf("size of wsum = %ld\n",w*pix);

              //release memory
              element_clear(pcom);// element_clear(wcom);
          }


          //verify if \Pi e(g^a,h^w) ?= e(g,h)^wsum, part of the verification
          create_ZproofWithNegativeValue(ghz, pairing,wsum);
          if ( element_cmp(ghz,PCOM) ) ErrorFlag = true;
          
          element_clear(PCOM); element_clear(ghz);
      }
      end = clock();
      step1_1 += (((double) (end - start)) / CLOCKS_PER_SEC);
     
      
      //First layer activation function
      start = clock();
      
      double * zkreal = (double *) malloc( neuronNumberAtH1 * sizeof(double)); 
      for ( int j = 0 ; j < neuronNumberAtH1; ++ j){
          zkreal[j] = -((double) zk[j])/ ((double) NUMSCALE);
          zkreal[j] = 1 / (1.0 + exp(zkreal[j]));
      }

      //Second hidden layer, neuronNumberAtH1*neuronNumberAtH2
      double * zkreal2 = (double *) malloc( neuronNumberAtH2 * sizeof(double)); 
      for ( int j = 0 ; j < neuronNumberAtH2; ++ j ){

          double wsumreal = 0;
          for ( int k = 0 ; k < neuronNumberAtH1; ++ k ){
              wsumreal += zkreal[k] * (double) fc1_weight[countWeight++] / (double) NUMSCALE;
          }
          
          //second hidden layer activation function
          zkreal2[j] = 1 / (1.0+exp(-wsumreal)) ;
      }

      //Third hidden layer, neuronNumberAtH2*neuronNumberAtH3
      double * zkreal3 = (double *) malloc( neuronNumberAtH3 * sizeof(double));
      for ( int j = 0 ; j < neuronNumberAtH3; ++ j ){
          
          double wsumreal = 0;
          for ( int k = 0 ; k < neuronNumberAtH2; ++ k ){
              wsumreal += zkreal2[k] * (double) fc1_weight[countWeight++] / (double) NUMSCALE;
          }
          
          //Third hidden layer activation function
          zkreal3[j] = 1 / (1.0+exp(-wsumreal)) ;
      }
      
      //Fourth hidden layer, neuronNumberAtH3*neuronNumberAtH4
      double * zkreal4 = (double *) malloc( neuronNumberAtH4 * sizeof(double));
      for ( int j = 0 ; j < neuronNumberAtH4; ++ j ){
          
          double wsumreal = 0;
          for ( int k = 0 ; k < neuronNumberAtH3; ++ k ){
              wsumreal += zkreal3[k] * (double) fc1_weight[countWeight++] / (double) NUMSCALE;
          }
          
          //Fourth hidden layer activation function
          zkreal4[j] = 1 / (1.0+exp(-wsumreal)) ;
      }
      
      //Output layer, neuronNumberAtH4*outputNum
      double * output = (double *) malloc( outputNum * sizeof(double));
      for ( int j = 0 ; j < outputNum; ++ j ){
          
          double wsumreal = 0;
          for ( int k = 0 ; k < neuronNumberAtH4; ++ k ){
              wsumreal += zkreal4[k] * (double) fc1_weight[countWeight++] / (double) NUMSCALE;
          }
          
          //Output layer activation function
          output[j] = 1 / (1.0+exp(-wsumreal)) ;
      }
      
      end = clock();
      step1_2 += (((double) (end - start)) / CLOCKS_PER_SEC);
      
      
      start = clock();
      element_t diffcom, errorcom; element_init_GT(diffcom, pairing);
      long int diff = E1*2;
      
      for ( int j = 0 ; j < outputNum; ++ j){
          
          long int outputtmp = (long int) -output[j] * NUMSCALE;
          
          //g^(y-o)
          element_t ycom, ocom, ycom1, ocom1, pcom;
          create_WproofWithNegativeValue(ycom,pairing,fc1_weight[countWeight]);
          create_WproofWithNegativeValue(ocom,pairing,outputtmp);
          element_mul(ycom,ycom,ocom);
          
          //g^(y-o)
          generate_AproofWithNegativeValue(ycom1,pairing,fc1_weight[countWeight]);
          generate_AproofWithNegativeValue(ocom1,pairing,outputtmp);
          element_mul(ycom1,ycom1,ocom1);
          
          //e(g^(y-o),g^(y-o))
          generate_Uproof(pcom,ycom,ycom1,pairing);
        
          //g^e2 * g^e2 * g^e2
          aggregatePairingResult(j,diffcom,pcom);
          
          element_clear(ycom);element_clear(ycom1);element_clear(ocom);element_clear(ocom1);
      }
      
      create_ZproofWithNegativeValue(errorcom, pairing,diff);
      if ( !element_cmp(errorcom,diffcom) ) ErrorFlag = true;
      element_clear(diffcom); element_clear(errorcom);
      
      end = clock();
      step1_3 += (((double) (end - start)) / CLOCKS_PER_SEC);

      
      start = clock();
      for ( int j = 0 ; j < outputNum; ++ j){
          
          long int outputtmp = (long int) -output[j] * NUMSCALE;
          
          element_t ycom, ocom, pcom, der, deltacom;
          //g^(y-o)
          create_WproofWithNegativeValue(ycom,pairing,fc1_weight[countWeight]);
          create_WproofWithNegativeValue(ocom,pairing,outputtmp);
          element_mul(ycom,ycom,ocom);
          
          //g^(sigma')
          double derivativereal = -output[j] * (1-output[j]) * NUMSCALE;
          long int derivativeLong = (long int) derivativereal;
          generate_AproofWithNegativeValue(der,pairing,derivativeLong);
          
          //e(g^(y-o),g^sigma')
          generate_Uproof(pcom,ycom,der,pairing);
          
          //g^delta and check e(g^(y-o),g^sigma') ?= g^delta
          create_ZproofWithNegativeValue(deltacom, pairing, DELTA);
          if ( !element_cmp(deltacom,pcom) ) ErrorFlag = true;
          
          element_clear(ycom);element_clear(ocom);element_clear(pcom);element_clear(der);element_clear(deltacom);
      }
      
      end = clock();
      step2_1 += (((double) (end - start)) / CLOCKS_PER_SEC);
      
      countWeight = 399999; 
      
      start = clock();
      for ( int j = 0 ; j < outputNum * neuronNumberAtH4 ; ++ j){
          
          long int a_L = (fc1_weight[countWeight--]);
          long int signal = (input[j]);
          long int derreal = a_L*signal ;
          
          element_t pcom, dercom;
          //generate g^a_(l-1)
          //create_WproofWithNegativeValue(wcom,pairing,a_L);
          //generate e(g^a,g^delta)
          generate_Uproof(pcom,encInput[j],encWeight[countWeight+1],pairing);
   
          //check if e(g^a,g^delta) ?= e(g,g)^der
          create_ZproofWithNegativeValue(dercom, pairing, derreal);
          if ( element_cmp(dercom,pcom) ) ErrorFlag = true;
          
      }
      end = clock();
      step2_2 += (((double) (end - start)) / CLOCKS_PER_SEC);
      
      
      int dimcount = 0 ;
      start = clock();
      for (int j = 0 ; j < outputNum ; ++ j ){
          
          //aggregated pairing viarable
          element_t PCOM, ghz; element_init_GT(PCOM, pairing);
          long int wsum = 0 ;
          
          for ( int k = 0 ; k < neuronNumberAtH4 ; ++ k){ // k < inputnum : the dimension of the input data
              
              long int w = (fc1_weight[countWeight--]);
              long int errorsignal = (input[dimcount]);
              wsum += (w*errorsignal);
              
              element_t pcom;
              //generate g^w
              //create_WproofWithNegativeValue(wcom,pairing,w);
              //generate l^unit =  e(g^a,g^w)
              generate_Uproof(pcom,encInput[dimcount++],encWeight[countWeight+1],pairing);
              //element_printf("size of gt = %B\n", unit_enc);
              
              aggregatePairingResult(k,PCOM,pcom);
              //printf("size of wsum = %ld\n",w*pix);
              
              //release memory
              element_clear(pcom); //element_clear(wcom);
          }
          
          //verify if \Pi e(g^a,h^w) ?= e(g,h)^wsum, part of the verification
          create_ZproofWithNegativeValue(ghz, pairing,wsum);
          if ( element_cmp(ghz,PCOM) ) ErrorFlag = true;
          
          element_clear(PCOM); element_clear(ghz);
      }
      end = clock();
      step2_3 += (((double) (end - start)) / CLOCKS_PER_SEC);
      
      
      start = clock();
      //derivative calculation at H4 -- H3
      for (int j = 0 ; j < neuronNumberAtH4 ; ++ j ){
          double sigmaprime = zkreal4[j]*(1-zkreal4[j]);
          for ( int k = 0 ; k < neuronNumberAtH3; ++ k){
              double weightupdate = sigmaprime * sigmaprime;
          }
      }
      
      //error signal at H3
      for ( int j = 0 ; j < neuronNumberAtH4; ++ j ){
          double wsumreal = 0;
          for ( int k = 0 ; k < neuronNumberAtH3; ++ k ){
              wsumreal += zkreal3[k] * (double) fc1_weight[countWeight--] / (double) NUMSCALE;
          }
      }
    
      //derivative at H3--H2
      for (int j = 0 ; j < neuronNumberAtH3 ; ++ j ){
          double sigmaprime = zkreal3[j]*(1-zkreal3[j]);
          for ( int k = 0 ; k < neuronNumberAtH2; ++ k){
              double weightupdate = sigmaprime * sigmaprime;
          }
      }
      
      //error signal at H2
      for ( int j = 0 ; j < neuronNumberAtH3; ++ j ){
          double wsumreal = 0;
          for ( int k = 0 ; k < neuronNumberAtH2; ++ k ){
              wsumreal += zkreal2[k] * (double) fc1_weight[countWeight--] / (double) NUMSCALE;
          }
      }
      
      //derivative at H2--H1
      for (int j = 0 ; j < neuronNumberAtH2 ; ++ j ){
          double sigmaprime = zkreal2[j]*(1-zkreal2[j]);
          for ( int k = 0 ; k < neuronNumberAtH1; ++ k){
              double weightupdate = sigmaprime * sigmaprime;
          }
      }
      
      //error signal at H1
      for ( int j = 0 ; j < neuronNumberAtH2; ++ j ){
          double wsumreal = 0;
          for ( int k = 0 ; k < neuronNumberAtH1; ++ k ){
              wsumreal += zkreal[k] * (double) fc1_weight[countWeight--] / (double) NUMSCALE;
          }
      }
      end = clock();
      step2_4 += (((double) (end - start)) / CLOCKS_PER_SEC);
      
      
      start = clock();
      for ( int j = 0 ; j < neuronNumberAtH1 * dim ; ++ j){
          
          long int w = (fc1_weight[countWeight--]);
          long int pix = (input[j]);
          long int derreal = w*pix ;
          
          element_t pcom,  dercom;
          //generate g^a_(l-1)
          //create_WproofWithNegativeValue(wcom,pairing,w);
          //generate e(g^a,g^delta)
          generate_Uproof(pcom,encInput[j],encWeight[countWeight+1],pairing);
          //check if e(g^a,g^delta) ?= e(g,g)^der
          create_ZproofWithNegativeValue(dercom, pairing, derreal);
          if ( element_cmp(dercom,pcom) ) ErrorFlag = true;
          
      }
      end = clock();
      step2_5 += (((double) (end - start)) / CLOCKS_PER_SEC);
      
      start = clock();
      int totalderivativeNum = dim*neuronNumberAtH1+neuronNumberAtH1*neuronNumberAtH2+neuronNumberAtH2*neuronNumberAtH3+neuronNumberAtH3*neuronNumberAtH4+ neuronNumberAtH4*outputNum;
      for ( int j = 0 ; j < totalderivativeNum; ++ j){
          fc1_weight[j] ++ ;
      }
      end = clock();
      step2_6 += (((double) (end - start)) / CLOCKS_PER_SEC);

      printf("Step 2 finished\n"); 

      if ( (i+1)%100 == 0 ){
        //printf("10 batch size finished\n"); 
        snprintf(buff, 1000, "%f\t", step1_1); writeTolog(buff);
        snprintf(buff, 1000, "%f\t", step1_2); writeTolog(buff);
        snprintf(buff, 1000, "%f\t", step1_3); writeTolog(buff);
        snprintf(buff, 1000, "%f\t", step2_1); writeTolog(buff);
        snprintf(buff, 1000, "%f\t", step2_2); writeTolog(buff);
        snprintf(buff, 1000, "%f\t", step2_3); writeTolog(buff);
        snprintf(buff, 1000, "%f\t", step2_4); writeTolog(buff);
        snprintf(buff, 1000, "%f\t", step2_5); writeTolog(buff);
        snprintf(buff, 1000, "%f\n", step2_6); writeTolog(buff);
      }
  } 
  
  
  printf("%d\n",ErrorFlag);
  free(buff);
  return 0;
}







/****** Start of function details *****/
void init_group_generators(pairing_t pairing){

   element_init_G2(g, pairing);
   element_init_GT(l, pairing);
   element_init_GT(l1, pairing);
   element_init_G1(h, pairing);

   element_random(g);
   //element_printf("system parameter g = %B\n", g);

   element_random(l);
   //element_printf("system parameter l = %B\n", l);

   element_random(h);
   //element_printf("system parameter h = %B\n", h);
  
   element_pairing(l1,g,h);
}

unsigned char * compressG1( pairing_t pairing, element_t g1){

    int n = pairing_length_in_bytes_compressed_G1(pairing);
    printf("The length of proof len = %d\n",n);
    unsigned char *data = pbc_malloc(n);

    element_to_bytes_compressed(data, g1);
    return data;
}

unsigned char * compressG2( pairing_t pairing, element_t g2){

    int n = pairing_length_in_bytes_compressed_G2(pairing);
    printf("The length of proof len = %d\n",n);
    unsigned char *data = pbc_malloc(n);

    element_to_bytes_compressed(data, g2);
    return data;
}

int getsizeofGT( pairing_t pairing){

    int n = pairing_length_in_bytes_GT(pairing);
    return n;
}

void generate_Aproof(element_t a_enc, pairing_t pairing, long int a){

    mpz_t ampz;
    mpz_init(ampz);
    element_init_G2(a_enc,pairing);

    mpz_set_si (ampz, a);
    element_pow_mpz(a_enc,g,ampz);
    //element_printf("proof g^a = %B\n", a_enc);
    mpz_clear(ampz);
}

void generate_AproofWithNegativeValue(element_t a_enc, pairing_t pairing, long int a){

    mpz_t ampz;
    mpz_init(ampz);
    element_init_G2(a_enc,pairing);

    mpz_set_si (ampz, a);
    if ( a < 0 ){
  	mpz_t pmpz; mpz_init(pmpz);
        //order of group: r=730750818665451621361119245571504901405976559617
        //mpz_set_str(pmpz,"12016012264891146079388821366740534204802954401251311822919615131047207289359704531102844802183906537786776",10);
	mpz_set_str(pmpz,"730750818665451621361119245571504901405976559617",10);
	mpz_add(ampz,ampz,pmpz);	
    }

    element_pow_mpz(a_enc,g,ampz);
    //element_printf("proof g^a = %B\n", a_enc);
    mpz_clear(ampz);
}

void create_Wproof(element_t w_enc, pairing_t pairing, long int w){

    mpz_t wmpz;

    mpz_init(wmpz);
    mpz_set_si (wmpz, w);
    element_init_G1(w_enc,pairing);
    element_pow_mpz(w_enc,h,wmpz);
    //element_printf("proof h^w = %B\n", w_enc);
    mpz_clear(wmpz);

}

void create_WproofWithNegativeValue(element_t w_enc, pairing_t pairing, long int w){

    mpz_t wmpz;

    mpz_init(wmpz);
    mpz_set_si (wmpz, w);
    element_init_G1(w_enc,pairing);

    if ( w < 0 ){
        mpz_t pmpz; mpz_init(pmpz);
	//order of group: h = 12016012264891146079388821366740534204802954401251311822919615131047207289359704531102844802183906537786776
        //mpz_set_str(pmpz,"12016012264891146079388821366740534204802954401251311822919615131047207289359704531102844802183906537786776",10);
	mpz_set_str(pmpz,"730750818665451621361119245571504901405976559617",10);
        mpz_add(wmpz,wmpz,pmpz);
    }

    element_pow_mpz(w_enc,h,wmpz);
    //element_printf("proof h^w = %B\n", w_enc);
    mpz_clear(wmpz);

}

void create_ZproofWithNegativeValue(element_t z_enc, pairing_t pairing, long int z){

    mpz_t zmpz;

    mpz_init(zmpz);
    mpz_set_si (zmpz, z);
    element_init_GT(z_enc,pairing);

    if ( z < 0 ){
        mpz_t pmpz; mpz_init(pmpz);
        //order of group:q = 87807107996633125224377819847540498158068831994142082110286533992664756308802229570786251794226622214231558587695823174592	       //77713367317481324925129998224791 
        //mpz_set_str(pmpz,"8780710799663312522437781984754049815806883199414208211028653399266475630880222957078625179422662221423155858769582317459277713367317481324925129998224792",10);
        mpz_set_str(pmpz,"533996758980227757740954184565982584196970567680134457127940818038232046519285332792455555186689",10);
        mpz_add(zmpz,zmpz,pmpz);
    }

    element_pow_mpz(z_enc,l1,zmpz);
    //element_printf("proof h^w = %B\n", w_enc);
    mpz_clear(zmpz);

}
void generate_Uproof(element_t unit_enc, element_t ga, element_t hw, pairing_t pairing){

    element_init_GT(unit_enc, pairing);
    element_pairing(unit_enc,ga,hw);

}

void create_Rproof(mpz_t r, element_t gt, pairing_t pairing){

    gmp_randstate_t state;
    gmp_randinit_default(state);
    mpz_init(r);
    mpz_urandomb (r,state, RANDOMRANGE);
 
    FILE * file;
    file = fopen("sizetest", "a");
    int size = mpz_out_raw(file, r);
    
    printf ("r = %d\n", size);

    //clock_t start, end;
    element_init_GT(gt, pairing);
    //start = clock();
    element_pow_mpz(gt,l,r);
    //end = clock();
    //double test = ((double) (end - start)) / CLOCKS_PER_SEC;
    //printf("time=%f",test); 
}

void generate_Cproof(element_t commit, element_t r_enc, element_t unit_enc, pairing_t pairing){


    element_init_GT(commit, pairing);
    element_mul(commit,r_enc ,unit_enc);

}

bool verify_unit(pairing_t pairing, element_t ga, element_t hw, element_t unit_enc){

     element_t tmp1;
     element_init_GT(tmp1, pairing);

     //e(g^a,h^w)
     element_pairing(tmp1, ga, hw);

     //e(g^a,h^w) ?= e(g,h)^(aw)
     bool flag = true;
     if (!element_cmp(tmp1, unit_enc)) {
        //printf("unit verifies\n");
     } else {
        //printf("*BUG* signature does not verify *BUG*\n");
        ErrorFlag = true;
        flag =  false;
     }

     element_clear(tmp1);
     return flag;
}

void readInputdata( long int  *input, int * inputIndex, char * filename){

  char * pixstr = (char*) malloc( 20 * sizeof(char));
  int i = 0;
  char tmp;

  FILE *file;
  file = fopen(filename, "r");
  int count  = 0 ;
  //printf("file openned\n");

  //int long minvalue = 5000;
  //int long maxvalue = 0;

  int dimentionCount = 0;
  if ( file != NULL ){

       while ( (tmp = (char)fgetc(file)) != EOF ){

           if (tmp != '[') continue;

           while ((tmp = (char)fgetc(file)) != EOF ){

                if  ( (tmp >= '0' && tmp <= '9') || tmp == '.' || tmp == '-'){
                    pixstr[i++] = tmp;
                    //printf("%c",tmp);

                    while ( ((tmp = (char)fgetc(file)) >= '0' &&
                        tmp <= '9') || tmp == '.' || tmp == '-' ){
                        pixstr[i++] = tmp;
                        //printf("%c",tmp);
                    }

		    pixstr[i] = '\0';
                    input[count++] = (long int) (NUMSCALE * atof(pixstr));

                    //if ( input[count-1] > maxvalue ) maxvalue = input[count-1] ;
                    //if ( input[count-1] < minvalue ) minvalue = input[count-1] ;

                    i = 0 ;

                }

                if ( tmp == ']' ) {
                   //dimentionCount++;
                   inputIndex[dimentionCount++] = count ;
                   //dimentionCount = 0 ;
                   break;
                }
          }
       }

       fclose(file);
  }
  else printf("file open error\n");
  //printf("min n=%ld\n", minvalue);
  //printf("max n=%ld\n", maxvalue);
  //printf("sample n=%u\n",dimentionCount);
  free(pixstr);

}


void readWeightParmaters( long int * weight, char * filename){

  char * pixstr = malloc( 20 * sizeof(char));
  int i = 0;
  char tmp;

  FILE *file;
  file = fopen(filename, "r");
  int count  = 0 ;

  if ( file != NULL ){

       while ( (tmp = (char)fgetc(file)) != EOF ){

           if (tmp == '[' || tmp == '\t' || tmp == '\n') continue;

           pixstr[i++] = tmp;
           if ( tmp == ' ' || tmp == ']'){
                pixstr[i-1] = '\0';
                if ( pixstr[0] != '\0' ) {
			if ( pixstr[i-2] == '.' ) pixstr[i-2] = '\0';
                        weight[count++] = (long int) (atof(pixstr));
                        //printf("%ld\n", weight[count-1]);
                }
                i = 0;
           }
       }
       fclose(file);
  }
  else printf("file open error\n");

  //printf("n=%d\n", count);
  free(pixstr);
}


void UnitVOConstructionTime(pairing_t pairing, long int pix, long int w, 
		element_t ga, element_t hw, element_t unit_enc){

  //generate g^a
  generate_Aproof(ga,pairing,pix);

  //create h^w
  create_Wproof(hw,pairing,w);

  //generate l^unit =  e(g^a,h^w)
  generate_Uproof(unit_enc,ga,hw,pairing);

}

bool checkSignOfUnit( long int pix, long int weight ){

  if ( pix * weight <= 0 ) return false;
  return true;
}

bool verify_wsum(pairing_t pairing, long int wsum, mpz_t R, element_t PCOM){

  //l^S
  mpz_t smpz; mpz_init(smpz); mpz_set_si (smpz, wsum);
  element_t S_enc; element_init_GT(S_enc,pairing);
  element_pow_mpz(S_enc,l1,smpz);
	
  //l^R
  element_t R_enc; element_init_GT(R_enc, pairing);
  element_pow_mpz(R_enc,l,R);

  //(l^R) * (l^S)
  element_t tmp; element_init_GT(tmp, pairing);
  element_mul(tmp, S_enc,R_enc); 
	  
  if (!element_cmp(tmp, PCOM)) {
        //printf("weighted sum verifies\n");
	return true;
  }
  else {
        //printf("*BUG* signature does not verify *BUG*\n");
	ErrorFlag = true;
	return false;
  }

  element_clear(S_enc); element_clear(R_enc); mpz_clear(R); element_clear(PCOM);
  element_clear(tmp); mpz_clear(smpz);

}

void aggregatePairingResult(int k, element_t PCOM, element_t pcom){

   if ( k == 0 ){
	element_set(PCOM,pcom);
   }
   else{
	element_mul(PCOM,PCOM,pcom);
   } 
}

void aggregateProof(bool flag, int k, element_t PCOM, element_t PCOM2, mpz_t R, mpz_t R2,
        element_t pcom, mpz_t r ){

    if ( k == 0 && flag ) {
        element_set(PCOM,pcom);  mpz_set(R,r);
    }
    else if (k > 0 && flag) {
        element_mul(PCOM,PCOM,pcom);  mpz_add(R,R,r);
    }
    else if ( k == 0 && (!flag) ){
        element_set(PCOM2,pcom);  mpz_set(R2,r);
    }
    else{
        element_mul(PCOM2,PCOM2,pcom); mpz_add(R2,R2,r);
    }
}

void writeTolog( char * buff){

    FILE *pfile;
    pfile = fopen("log", "a");

    if ( pfile != NULL ){
        fprintf(pfile, "%s", buff);
        fclose(pfile);
    }
    else printf("log file cannot open\n");

}

float exponential(int n, float x) { 
    float sum = 1.0f; // initialize sum of series 
  
    for (int i = n - 1; i > 0; --i ) 
        sum = 1 + x * sum / i; 
  
    return sum; 
} 
